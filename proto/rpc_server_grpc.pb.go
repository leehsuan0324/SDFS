// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/rpc_server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogQueryClient is the client API for LogQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogQueryClient interface {
	Grep(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*GrepResponse, error)
	SearchLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (LogQuery_SearchLogsClient, error)
}

type logQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewLogQueryClient(cc grpc.ClientConnInterface) LogQueryClient {
	return &logQueryClient{cc}
}

func (c *logQueryClient) Grep(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*GrepResponse, error) {
	out := new(GrepResponse)
	err := c.cc.Invoke(ctx, "/proto.LogQuery/Grep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logQueryClient) SearchLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (LogQuery_SearchLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogQuery_ServiceDesc.Streams[0], "/proto.LogQuery/SearchLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logQuerySearchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogQuery_SearchLogsClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type logQuerySearchLogsClient struct {
	grpc.ClientStream
}

func (x *logQuerySearchLogsClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogQueryServer is the server API for LogQuery service.
// All implementations must embed UnimplementedLogQueryServer
// for forward compatibility
type LogQueryServer interface {
	Grep(context.Context, *LogRequest) (*GrepResponse, error)
	SearchLogs(*LogRequest, LogQuery_SearchLogsServer) error
	mustEmbedUnimplementedLogQueryServer()
}

// UnimplementedLogQueryServer must be embedded to have forward compatible implementations.
type UnimplementedLogQueryServer struct {
}

func (UnimplementedLogQueryServer) Grep(context.Context, *LogRequest) (*GrepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grep not implemented")
}
func (UnimplementedLogQueryServer) SearchLogs(*LogRequest, LogQuery_SearchLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchLogs not implemented")
}
func (UnimplementedLogQueryServer) mustEmbedUnimplementedLogQueryServer() {}

// UnsafeLogQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogQueryServer will
// result in compilation errors.
type UnsafeLogQueryServer interface {
	mustEmbedUnimplementedLogQueryServer()
}

func RegisterLogQueryServer(s grpc.ServiceRegistrar, srv LogQueryServer) {
	s.RegisterService(&LogQuery_ServiceDesc, srv)
}

func _LogQuery_Grep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServer).Grep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogQuery/Grep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServer).Grep(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogQuery_SearchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogQueryServer).SearchLogs(m, &logQuerySearchLogsServer{stream})
}

type LogQuery_SearchLogsServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type logQuerySearchLogsServer struct {
	grpc.ServerStream
}

func (x *logQuerySearchLogsServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LogQuery_ServiceDesc is the grpc.ServiceDesc for LogQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogQuery",
	HandlerType: (*LogQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grep",
			Handler:    _LogQuery_Grep_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchLogs",
			Handler:       _LogQuery_SearchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rpc_server.proto",
}

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	NodeLeave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) NodeLeave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, "/proto.File/NodeLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	NodeLeave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) NodeLeave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeLeave not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_NodeLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).NodeLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.File/NodeLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).NodeLeave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeLeave",
			Handler:    _File_NodeLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc_server.proto",
}
